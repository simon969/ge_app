
@model ge_app.Models.ProcessModel
    
@{
    ViewData["Title"] = "Get Repository Data";
}

    <div class="container">
        @Html.Hidden("token", @Model.token)
        @Html.Hidden("user", @Model.user)
        <h4>Get Repository Files</h4>
        <form method="get" action="/action_page.php" id="get_list_form">
            <div class="row col-sm-12">  
                <div class="col-sm-6"> 
                    <div class="form-group">
                        <label for="qryGroupId">ProjectId
                        <button class="button" type="button" onclick="get_groups()">Load Groups</button>
                        </label>
                        <select class="form-control" type="text" id="qryGroupId" name="qryGroupId"> 
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="qryProjectId">ProjectId
                        <button class="button" type="button" onclick="get_projects()">Load Projects</button>
                        </label>
                        <select class="form-control" type="text" id="qryProjectId" name="qryProjectId"> 
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="qryPointId">Location (PointId) </label>
                        <button class="button" type="button" onclick="get_points()">Load Points</button>
                        </label>
                        <select class="form-control" type="text" id="qryPointId" name="qryPointId"> 
                        
                        </select>
                    </div>
                </div>
                <div class="col-sm-6">      
                    <div class="form-group">
                        <label for="qryFromDT">DateTime Created</label>
                        <input class="form-control" type="datetime-local" id="qryFromDT" name="qryFromDT" placeholder="...enter mond_type">
                    </div>
                    <div class="form-group">
                        <label for="qryToDT">Readings to DateTime</label>
                        <input class="form-control" type="datetime-local" id="qryToDT" name="qryToDT" placeholder="...enter mond_type">
                    </div>
                    <div class="form-group">
                                <label for="qryPage">Page No</label>
                                <input class="form-control" type="text" id="qryPage" name="qryPage" value="0">
                    </div>  
                    <div class="form-group">
                                <label for="qryPage">Page Size</label>
                                <input class="form-control" type="text" id="qrySize" name="qrySize" value="1000">
                    </div>
                    <div class="form-group">  
                                <input class="button" type="button" value="Previous Page" onclick="previous_page()">  
                                <input class="button" type="button" value="Get Data Files" onclick="get_data_results()">  
                                <input class="button" type="button" value="Next Page" onclick="next_page()">  
                                <a id="url_json" target="_blank" rel="noopener" >JSON</a>
                                <a id="url_csv" target="_blank" rel="noopener">CSV</a>
                    </div>
                </div>
            </div>   
        </form>
            <div class="table-wrapper-scroll-y mond_list-scrollbar">
                <table class="table table-striped" id="data_table">
                    <thead id="data_head">
                    </thead>
                <tbody id="data_body"></tbody>
                </table>
            </div>

            <p id="response"> </p>
           

           <canvas id="mychart"></canvas>
    </div>  
    
    <script src="~/lib/chart.js/dist/chart.js"></script>  
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script type="text/javascript">

    var record_count = 0;
    const DATA_COUNT = 7;
    const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
    
    const labels =  get_labels(get_months(['2019','2020','2021','2022']));

    const data = {
            labels: labels,
            datasets: [
                
            ]
    };
    
    const config = {
        type: 'bar',
        data: data,
        options: {
            responsive: true,
            plugins: {
            legend: {
                position: 'top',
            },
            title: {
                display: true,
                text: 'Chart.js Bar Chart'
            }
            }
        },
    };
    
    var ctx = document.getElementById('mychart').getContext("2d");
      
    const mychart = new Chart(
              ctx,
              config
    );

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
    var data_files = []
        
    function resetChart () {

        mychart.data = data        
    }
    
    function get_months(years) {
        let m = {};
        for (let j=0; j<years.length;j++){
            for (let i=1; i<=12; i++) {
                m[years[j] + '-' + ('0'+i).slice(-2)] = 0;
            }
        }
        return m;
    }

    function by_month(data) {
        g = get_months(['2020','2021','2022']);
        for (let i = 0; i < data.length; i++) {
            d = new Date(data[i].createdDT)
            s = d.toISOString().slice(0, 7);
            g[s] += 1;  
        } 
        return g
    }   
    
    function get_labels(months) {
        let arr = [];
        for (var key in months) {
            arr.push(key);
        }
        return arr;
    }
    
    function get_data(months) {
        let arr = [];
        for (var key in months) {
            arr.push(months[key]);
        }
        return arr;
    }
    
    function renderChart (data, label) {

      grouped = by_month(data);
      const new_data = get_data (grouped);
      addData(mychart,new_data,label);
      
    }

    function removeData(ds1) {
    let removalIndex = data.datasets.indexOf(ds1); //Locate index of ds1
        if(removalIndex >= 0) { //make sure this element exists in the array
            data.datasets.splice(removalIndex, 1);
        }
    }
    
    function addData(chart, add_data, label) {
        const data = chart.data;
        const dsColor = namedColor(chart.data.datasets.length);
        const newDataset = {
            label: label,
            backgroundColor: dsColor,
            borderColor: dsColor,
            borderWidth: 1,
            data: add_data,
            };
      chart.data.datasets.push(newDataset);
      chart.update();
    }

    function init_form () {
       
        $("#get_list_form").submit(function(e) {
            e.preventDefault()
            get_mond_results()
        });
    }
    
    function get_groups() {
        init_form()
        var url = repo_host + '/group';
        httpGetAsync(url, display_groups)
    }
    
    function display_groups(response) {
        var json_data = JSON.parse(response);
        var sel = document.getElementById("qryGroupId");
        sel.innerHTML = ""
        for (var i = 0; i < json_data.length; i++) {
            var group = json_data[i];
            op = document.createElement('option');
            op.setAttribute("value",group.Id)
            op.innerHTML = group.name; 
            sel.appendChild(op)
        }
    }
    function get_projects() {
        var groupid = get_value("qryGroupId");
        var url = repo_host + '/project/group/' + groupid;
        httpGetAsync(url,display_projects)
    }
    function display_projects(response) {
        var json_data = JSON.parse(response);

        var sel = document.getElementById("qryProjectId");
        sel.innerHTML = ""
        for (var i = 0; i < json_data.length; i++) {
            var project = json_data[i];
            op = document.createElement('option');
            op.setAttribute("value",project.Id)
            op.innerHTML = project.name 
            sel.appendChild(op)
        }
    }
    function get_points() {
        var projectid = get_value("qryProjectId"); 
        var groupid = get_value("qryGroupId");
        var url = ''
        
        if (groupid) {
            url = repo_host + `/data/unique/group/${groupid}/locname`;
        }

        if (projectid) {
            url = repo_host + `/data/unique/project/${projectid}/locname`;
        }
        
        httpGetAsync(url,display_points)
    }
    
    function display_points(response) {
        var json_data = JSON.parse(response);
        var sel = document.getElementById("qryPointId");
        sel.innerHTML = ""
        for (var i = 0; i < json_data.length; i++) {
            var data = json_data[i];
            op = document.createElement('option');
            op.setAttribute("value",data.locName)
            if (data.count) { 
                op.innerHTML = data.locName + ' (' + data.count + ': ' + data.FromDT + '-' + data.ToDT + ')'
            } else {
                op.innerHTML = data.locName 
            }
            sel.appendChild(op)
        }

    }

    function previous_page() {
        var page = get_value("qryPage");
        if (page > 0) {
        set_value("qryPage", parseInt(page) - 1);
        }
        get_mond_results();
    }
    
    function next_page() {
        var page = get_value("qryPage");
        set_value("qryPage", parseInt(page) + 1);
        get_mond_results();
    }
    
    
    function get_data_results() {
        var groupid = get_value("qryGroupId");
        var projectid = get_value("qryProjectId");
        var pointid = get_value("qryPointId");
        var from_dt = get_value("qryFromDT");
        var to_dt = get_value("qryToDT");
        var page = get_value("qryPage");
        var size = get_value("qrySize");
        dateformat = 'YYYY-MM-DDTHH:m:s';

        var url = ''
        
        if (groupid) {
        url = repo_host + `/data/group/${groupid}`;
        }
        
        if (projectid) {
        url = repo_host + `/data/project/${projectid}`;
        }

        if (pointid) {
        url += `/locname/${pointid}`;
        }

        // var url = repo_host + `/data/project/${projectid}/locotherdb/${pointid}`;
        
        var add = '/?';
        
        if (from_dt) {
            var d = new Date(from_dt)
            url += add + 'from=' + d.toISOString();
            add = "&";
        } 

        if (to_dt) {
            var d = new Date(to_dt)
            url += add + 'to=' + d.toISOString();
            add = "&";
        } 
        
        if (page && size) {   
            url += add + 'size=' + size + '&page=' + page
            add = "&"
        }  
                  
        httpGetAsync(url,display_data_list);
    }
    function get_data_label() {
    
        let groupid = get_value("qryGroupId");
        let projectid = get_value("qryProjectId");
        let pointid = get_value("qryPointId");
        
        let label = 'data'
        
        if (groupid) { 
        label = 'group:'  +  groupid;
        }
        
        if (projectid) { 
        label = 'project:'  +  projectid;
        }
        
        if (pointid) { 
        label = pointid;
        }

        return label;
    }
    function display_data_list (response) {

        var show_fields = ['locName','filename','filesize','description','createdDT']
        var json_data = JSON.parse(response);
        var thead = document.getElementById("data_head");
        thead.innerHTML = "";
        tr = document.createElement('tr');
        th = document.createElement('th');
            th.setAttribute("class","d-none");
            th.innerHTML = "Id";
            tr.appendChild(th);
        for (var j = 0; j < show_fields.length; j++) {
            th = document.createElement('th')
            th.innerHTML = show_fields[j];
            tr.appendChild(th);
        }
        thead.appendChild(tr)
        
        var tbody = document.getElementById("data_body");
       // tbody.innerHTML = "";
        for (var i = 0; i < json_data.length; i++) {
        var data = json_data[i];
        tr = document.createElement('tr');
             td = document.createElement('td')
                td.setAttribute("class","d-none")
                td.innerHTML = data['Id']
            tr.appendChild(td)
            for (var j = 0; j < show_fields.length; j++) {
                td = document.createElement('td')
                td.innerHTML = data[show_fields[j]]
            tr.appendChild(td)
            }
            @* td = document.createElement('td')
                btn = document.createElement ('button')
                btn.setAttribute("class", "button")
                btn.setAttribute("onclick", "get_result('" + mond.gINTRecID + "')")
                btn.innerHTML = "Details"
                td.appendChild(btn)
                btn = document.createElement ('button')
                btn.setAttribute("class", "button")
                btn.setAttribute("onclick", "update_mond('" + mond.gINTRecID + "')")
                btn.innerHTML = "Update",
                td.appendChild(btn) 
            tr.appendChild(td) *@
        tbody.appendChild(tr);
        } 
        
        let label = get_data_label();
        record_count += json_data.length

        if (json_data.length>0){ 
            set_innerHTML ("response",  'Records returned: Count = ' + record_count)
            renderChart (json_data, label);
        } else {
            set_innerHTML ("response",'No records returned')
        }
    }

    
    
    </script>
