#pragma checksum "C:\Users\thomsonsj\AECOM\ge_dev - Documents\apps\ge_app\Views\GroundWater\RepositoryData.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c8909ff02402e17f163212c96a576e18e7ffde32"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_GroundWater_RepositoryData), @"mvc.1.0.view", @"/Views/GroundWater/RepositoryData.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/GroundWater/RepositoryData.cshtml", typeof(AspNetCore.Views_GroundWater_RepositoryData))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\thomsonsj\AECOM\ge_dev - Documents\apps\ge_app\Views\_ViewImports.cshtml"
using ge_app;

#line default
#line hidden
#line 2 "C:\Users\thomsonsj\AECOM\ge_dev - Documents\apps\ge_app\Views\_ViewImports.cshtml"
using ge_app.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c8909ff02402e17f163212c96a576e18e7ffde32", @"/Views/GroundWater/RepositoryData.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a2085f25f2ee1003de86d2144c6e47df98778b6d", @"/Views/_ViewImports.cshtml")]
    public class Views_GroundWater_RepositoryData : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ge_app.Models.ProcessModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "get", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("/action_page.php"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("get_list_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/chart.js/dist/chart.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(37, 6, true);
            WriteLiteral("    \r\n");
            EndContext();
#line 4 "C:\Users\thomsonsj\AECOM\ge_dev - Documents\apps\ge_app\Views\GroundWater\RepositoryData.cshtml"
  
    ViewData["Title"] = "Get Repository Data";

#line default
#line hidden
            BeginContext(98, 39, true);
            WriteLiteral("\r\n    <div class=\"container\">\r\n        ");
            EndContext();
            BeginContext(138, 34, false);
#line 9 "C:\Users\thomsonsj\AECOM\ge_dev - Documents\apps\ge_app\Views\GroundWater\RepositoryData.cshtml"
   Write(Html.Hidden("token", @Model.token));

#line default
#line hidden
            EndContext();
            BeginContext(172, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(183, 32, false);
#line 10 "C:\Users\thomsonsj\AECOM\ge_dev - Documents\apps\ge_app\Views\GroundWater\RepositoryData.cshtml"
   Write(Html.Hidden("user", @Model.user));

#line default
#line hidden
            EndContext();
            BeginContext(215, 49, true);
            WriteLiteral("\r\n        <h4>Get Repository Files</h4>\r\n        ");
            EndContext();
            BeginContext(264, 3270, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "88355e1c3a004b49b8499565bce24c44", async() => {
                BeginContext(328, 3199, true);
                WriteLiteral(@"
            <div class=""row col-sm-12"">  
                <div class=""col-sm-6""> 
                    <div class=""form-group"">
                        <label for=""qryGroupId"">ProjectId
                        <button class=""button"" type=""button"" onclick=""get_groups()"">Load Groups</button>
                        </label>
                        <select class=""form-control"" type=""text"" id=""qryGroupId"" name=""qryGroupId""> 
                        </select>
                    </div>
                    <div class=""form-group"">
                        <label for=""qryProjectId"">ProjectId
                        <button class=""button"" type=""button"" onclick=""get_projects()"">Load Projects</button>
                        </label>
                        <select class=""form-control"" type=""text"" id=""qryProjectId"" name=""qryProjectId""> 
                        </select>
                    </div>
                    <div class=""form-group"">
                        <label for=""qryPointId"">Location (Poin");
                WriteLiteral(@"tId) </label>
                        <button class=""button"" type=""button"" onclick=""get_points()"">Load Points</button>
                        </label>
                        <select class=""form-control"" type=""text"" id=""qryPointId"" name=""qryPointId""> 
                        
                        </select>
                    </div>
                </div>
                <div class=""col-sm-6"">      
                    <div class=""form-group"">
                        <label for=""qryFromDT"">DateTime Created</label>
                        <input class=""form-control"" type=""datetime-local"" id=""qryFromDT"" name=""qryFromDT"" placeholder=""...enter mond_type"">
                    </div>
                    <div class=""form-group"">
                        <label for=""qryToDT"">Readings to DateTime</label>
                        <input class=""form-control"" type=""datetime-local"" id=""qryToDT"" name=""qryToDT"" placeholder=""...enter mond_type"">
                    </div>
                    <div class=""fo");
                WriteLiteral(@"rm-group"">
                                <label for=""qryPage"">Page No</label>
                                <input class=""form-control"" type=""text"" id=""qryPage"" name=""qryPage"" value=""0"">
                    </div>  
                    <div class=""form-group"">
                                <label for=""qryPage"">Page Size</label>
                                <input class=""form-control"" type=""text"" id=""qrySize"" name=""qrySize"" value=""1000"">
                    </div>
                    <div class=""form-group"">  
                                <input class=""button"" type=""button"" value=""Previous Page"" onclick=""previous_page()"">  
                                <input class=""button"" type=""button"" value=""Get Data Files"" onclick=""get_data_results()"">  
                                <input class=""button"" type=""button"" value=""Next Page"" onclick=""next_page()"">  
                                <a id=""url_json"" target=""_blank"" rel=""noopener"" >JSON</a>
                                <a id=""url_c");
                WriteLiteral("sv\" target=\"_blank\" rel=\"noopener\">CSV</a>\r\n                    </div>\r\n                </div>\r\n            </div>   \r\n        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(3534, 429, true);
            WriteLiteral(@"
            <div class=""table-wrapper-scroll-y mond_list-scrollbar"">
                <table class=""table table-striped"" id=""data_table"">
                    <thead id=""data_head"">
                    </thead>
                <tbody id=""data_body""></tbody>
                </table>
            </div>

            <p id=""response""> </p>
           

           <canvas id=""mychart""></canvas>
    </div>  
    
    ");
            EndContext();
            BeginContext(3963, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b834d0af14d1416da7e75ae0c8d7bd3c", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4015, 10520, true);
            WriteLiteral(@"  
    <script src=""https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js""></script>
    <script type=""text/javascript"">

    var record_count = 0;
    const DATA_COUNT = 7;
    const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
    
    const labels =  get_labels(get_months(['2019','2020','2021','2022']));

    const data = {
            labels: labels,
            datasets: [
                
            ]
    };
    
    const config = {
        type: 'bar',
        data: data,
        options: {
            responsive: true,
            plugins: {
            legend: {
                position: 'top',
            },
            title: {
                display: true,
                text: 'Chart.js Bar Chart'
            }
            }
        },
    };
    
    var ctx = document.getElementById('mychart').getContext(""2d"");
      
    const mychart = new Chart(
              ctx,
              config
    );

co");
            WriteLiteral(@"nst actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.data");
            WriteLiteral(@"sets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
    var data_files = []
        
    function resetChart () {

        mychart.data = data        
    }
    
    function get_months(years) {
        let m = {};
        for (let j=0; j<years.length;j++){
            for (let i=1; i<=12; i++) {
                m[years[j] + '-' + ('0'+i).slice(-2)] = 0;
            }
        }
        return m;
    }

    function by_month(data) {
        g = get_months(['2020','2021','2022']);
        for (let i = 0; i < data.length; i++) ");
            WriteLiteral(@"{
            d = new Date(data[i].createdDT)
            s = d.toISOString().slice(0, 7);
            g[s] += 1;  
        } 
        return g
    }   
    
    function get_labels(months) {
        let arr = [];
        for (var key in months) {
            arr.push(key);
        }
        return arr;
    }
    
    function get_data(months) {
        let arr = [];
        for (var key in months) {
            arr.push(months[key]);
        }
        return arr;
    }
    
    function renderChart (data, label) {

      grouped = by_month(data);
      const new_data = get_data (grouped);
      addData(mychart,new_data,label);
      
    }

    function removeData(ds1) {
    let removalIndex = data.datasets.indexOf(ds1); //Locate index of ds1
        if(removalIndex >= 0) { //make sure this element exists in the array
            data.datasets.splice(removalIndex, 1);
        }
    }
    
    function addData(chart, add_data, label) {
        const data = chart.data;
");
            WriteLiteral(@"        const dsColor = namedColor(chart.data.datasets.length);
        const newDataset = {
            label: label,
            backgroundColor: dsColor,
            borderColor: dsColor,
            borderWidth: 1,
            data: add_data,
            };
      chart.data.datasets.push(newDataset);
      chart.update();
    }

    function init_form () {
       
        $(""#get_list_form"").submit(function(e) {
            e.preventDefault()
            get_mond_results()
        });
    }
    
    function get_groups() {
        init_form()
        var url = repo_host + '/group';
        httpGetAsync(url, display_groups)
    }
    
    function display_groups(response) {
        var json_data = JSON.parse(response);
        var sel = document.getElementById(""qryGroupId"");
        sel.innerHTML = """"
        for (var i = 0; i < json_data.length; i++) {
            var group = json_data[i];
            op = document.createElement('option');
            op.setAttribute(""valu");
            WriteLiteral(@"e"",group.Id)
            op.innerHTML = group.name; 
            sel.appendChild(op)
        }
    }
    function get_projects() {
        var groupid = get_value(""qryGroupId"");
        var url = repo_host + '/project/group/' + groupid;
        httpGetAsync(url,display_projects)
    }
    function display_projects(response) {
        var json_data = JSON.parse(response);

        var sel = document.getElementById(""qryProjectId"");
        sel.innerHTML = """"
        for (var i = 0; i < json_data.length; i++) {
            var project = json_data[i];
            op = document.createElement('option');
            op.setAttribute(""value"",project.Id)
            op.innerHTML = project.name 
            sel.appendChild(op)
        }
    }
    function get_points() {
        var projectid = get_value(""qryProjectId""); 
        var groupid = get_value(""qryGroupId"");
        var url = ''
        
        if (groupid) {
            url = repo_host + `/data/unique/group/${groupid}/locname`;
 ");
            WriteLiteral(@"       }

        if (projectid) {
            url = repo_host + `/data/unique/project/${projectid}/locname`;
        }
        
        httpGetAsync(url,display_points)
    }
    
    function display_points(response) {
        var json_data = JSON.parse(response);
        var sel = document.getElementById(""qryPointId"");
        sel.innerHTML = """"
        for (var i = 0; i < json_data.length; i++) {
            var data = json_data[i];
            op = document.createElement('option');
            op.setAttribute(""value"",data.locName)
            if (data.count) { 
                op.innerHTML = data.locName + ' (' + data.count + ': ' + data.FromDT + '-' + data.ToDT + ')'
            } else {
                op.innerHTML = data.locName 
            }
            sel.appendChild(op)
        }

    }

    function previous_page() {
        var page = get_value(""qryPage"");
        if (page > 0) {
        set_value(""qryPage"", parseInt(page) - 1);
        }
        get_mond_results");
            WriteLiteral(@"();
    }
    
    function next_page() {
        var page = get_value(""qryPage"");
        set_value(""qryPage"", parseInt(page) + 1);
        get_mond_results();
    }
    
    
    function get_data_results() {
        var groupid = get_value(""qryGroupId"");
        var projectid = get_value(""qryProjectId"");
        var pointid = get_value(""qryPointId"");
        var from_dt = get_value(""qryFromDT"");
        var to_dt = get_value(""qryToDT"");
        var page = get_value(""qryPage"");
        var size = get_value(""qrySize"");
        dateformat = 'YYYY-MM-DDTHH:m:s';

        var url = ''
        
        if (groupid) {
        url = repo_host + `/data/group/${groupid}`;
        }
        
        if (projectid) {
        url = repo_host + `/data/project/${projectid}`;
        }

        if (pointid) {
        url += `/locname/${pointid}`;
        }

        // var url = repo_host + `/data/project/${projectid}/locotherdb/${pointid}`;
        
        var add = '/?';
        
  ");
            WriteLiteral(@"      if (from_dt) {
            var d = new Date(from_dt)
            url += add + 'from=' + d.toISOString();
            add = ""&"";
        } 

        if (to_dt) {
            var d = new Date(to_dt)
            url += add + 'to=' + d.toISOString();
            add = ""&"";
        } 
        
        if (page && size) {   
            url += add + 'size=' + size + '&page=' + page
            add = ""&""
        }  
                  
        httpGetAsync(url,display_data_list);
    }
    function get_data_label() {
    
        let groupid = get_value(""qryGroupId"");
        let projectid = get_value(""qryProjectId"");
        let pointid = get_value(""qryPointId"");
        
        let label = 'data'
        
        if (groupid) { 
        label = 'group:'  +  groupid;
        }
        
        if (projectid) { 
        label = 'project:'  +  projectid;
        }
        
        if (pointid) { 
        label = pointid;
        }

        return label;
    }
    functio");
            WriteLiteral(@"n display_data_list (response) {

        var show_fields = ['locName','filename','filesize','description','createdDT']
        var json_data = JSON.parse(response);
        var thead = document.getElementById(""data_head"");
        thead.innerHTML = """";
        tr = document.createElement('tr');
        th = document.createElement('th');
            th.setAttribute(""class"",""d-none"");
            th.innerHTML = ""Id"";
            tr.appendChild(th);
        for (var j = 0; j < show_fields.length; j++) {
            th = document.createElement('th')
            th.innerHTML = show_fields[j];
            tr.appendChild(th);
        }
        thead.appendChild(tr)
        
        var tbody = document.getElementById(""data_body"");
       // tbody.innerHTML = """";
        for (var i = 0; i < json_data.length; i++) {
        var data = json_data[i];
        tr = document.createElement('tr');
             td = document.createElement('td')
                td.setAttribute(""class"",""d-none"")
      ");
            WriteLiteral(@"          td.innerHTML = data['Id']
            tr.appendChild(td)
            for (var j = 0; j < show_fields.length; j++) {
                td = document.createElement('td')
                td.innerHTML = data[show_fields[j]]
            tr.appendChild(td)
            }
");
            EndContext();
            BeginContext(15172, 430, true);
            WriteLiteral(@"        tbody.appendChild(tr);
        } 
        
        let label = get_data_label();
        record_count += json_data.length

        if (json_data.length>0){ 
            set_innerHTML (""response"",  'Records returned: Count = ' + record_count)
            renderChart (json_data, label);
        } else {
            set_innerHTML (""response"",'No records returned')
        }
    }

    
    
    </script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ge_app.Models.ProcessModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
