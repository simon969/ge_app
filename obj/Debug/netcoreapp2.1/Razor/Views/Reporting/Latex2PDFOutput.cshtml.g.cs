#pragma checksum "C:\Users\thomsonsj\apps\ge_app\Views\Reporting\Latex2PDFOutput.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "befac298b257354474de5c7bbb2ddd3da7ba08e0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Reporting_Latex2PDFOutput), @"mvc.1.0.view", @"/Views/Reporting/Latex2PDFOutput.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Reporting/Latex2PDFOutput.cshtml", typeof(AspNetCore.Views_Reporting_Latex2PDFOutput))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\thomsonsj\apps\ge_app\Views\_ViewImports.cshtml"
using ge_app;

#line default
#line hidden
#line 2 "C:\Users\thomsonsj\apps\ge_app\Views\_ViewImports.cshtml"
using ge_app.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"befac298b257354474de5c7bbb2ddd3da7ba08e0", @"/Views/Reporting/Latex2PDFOutput.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a2085f25f2ee1003de86d2144c6e47df98778b6d", @"/Views/_ViewImports.cshtml")]
    public class Views_Reporting_Latex2PDFOutput : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ge_app.Models.ProcessModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("http://localhost:3000/ge_task/"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "get", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("task_list_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "normal", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "macro", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("latex_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", new global::Microsoft.AspNetCore.Html.HtmlString("latex_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("enctype", new global::Microsoft.AspNetCore.Html.HtmlString("multipart/form-data"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(35, 6, true);
            WriteLiteral("    \r\n");
            EndContext();
#line 3 "C:\Users\thomsonsj\apps\ge_app\Views\Reporting\Latex2PDFOutput.cshtml"
  
    ViewData["Title"] = "Latex to PDF Output";

#line default
#line hidden
            BeginContext(96, 95, true);
            WriteLiteral("\r\n  <div class=\"container\">\r\n    <!-- Content here -->\r\n    <h2>Latex to PDF Output</h2>\r\n     ");
            EndContext();
            BeginContext(191, 572, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2e409b0139b14a48b195ac591a1b127c", async() => {
                BeginContext(270, 486, true);
                WriteLiteral(@"
            <div class=""row"">  
                <div class=""col-sm-6""> 
                    <div class=""form-group"">
                        <input class=""form-control"" type=""text"" id=""owner"" name=""owner"" placeholder=""...enter owner email"">
                    </div>
                </div>
                <div class=""col-sm-6""> 
                    <input class=""button"" type=""button"" value=""Find"" onclick=""get_tasks()"">
                </div>
            </div>   
      ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(763, 1689, true);
            WriteLiteral(@"
      <div class=""table-wrapper-scroll-y plaxis_list-scrollbar"">
          <table class=""table table-striped"" id=""task_table"">
              <thead>
              <tr>
                  <th class=""d-none"" scope=""col"">Id</th>
                  <th class=""col-2"" scope=""col"">Details</th>
                  <th class=""col-3"" scope=""col"">Tex files</th>
                  <th class=""col-3"" scope=""col"">Aux files</th>
                  <th class=""col-3"" scope=""col"">PDF files</th>
                  <th class=""col-1""  scope=""col"">Action</th>
              </tr>
              </thead>
          <tbody id=""task_body""></tbody>
          </table>
      </div>
  
    
    <p>Convert Latex string to PDF</p>
      <div class=""form-group"">
      <label for=""latex"">Raw Latex</label>
        <textarea id=""latex"" class = ""form-control"" name=""latex"" placeholder=""...latex formated text"" rows=""12"" cols=""50""></textarea>
      </div>
        <div class=""row"">
          <div class=""col-sm-6"">
            <div cl");
            WriteLiteral(@"ass=""form-group"">
              <label for=""type""> Description</label>
              <input type=""text"" class=""form-control"" id=""description"" placeholder=""...description of task"" name=""description"">
            </div>
            <div class=""form-group"">
              <label for=""filename""> Latex filename (*.tex)</label>
              <input type=""text"" class=""form-control"" id=""filename"" placeholder=""...file name (*.tex)"" name=""filename"">
            </div> 
            <div class=""form-group"">
              <label for=""type""> Latex content type</label>
              <select type=""text"" class=""form-control"" id=""type"" name=""type"">
                ");
            EndContext();
            BeginContext(2452, 38, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fbe1298f0f24bbf83644905d1f71b78", async() => {
                BeginContext(2475, 6, true);
                WriteLiteral("Normal");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2490, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(2508, 36, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8cddcdebfefc422db84a6706dc2e6c5b", async() => {
                BeginContext(2530, 5, true);
                WriteLiteral("Macro");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2544, 643, true);
            WriteLiteral(@"
              </select>
            </div>
          </div>
          <div class=""col-sm-6"">
            <div class=""form-group"">
              <label for=""type""> Data class </label>
              <input type=""text"" class=""form-control"" id=""dataclass"" placeholder=""...data class name (for macro identification)"" name=""dataclass"">
            </div>
            <div class=""form-group"">
              <label for=""type""> Expiration date</label>
              <input type=""text"" class=""form-control"" id=""expires"" placeholder=""...expiration date of task"" name=""expires"">
            </div>
          </div>
        </div>

       ");
            EndContext();
            BeginContext(3187, 859, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2ed5fac615ad4b4ca1010da326c901b1", async() => {
                BeginContext(3257, 782, true);
                WriteLiteral(@"
          <div class=""form-group"">
            <label for=""host"">Latex Files</label>
            <input type=""file"" id=""files"" name=""files"" accept="".tex"" multiple=""multiple"" onchange=""update_file_list3('files','filelist')"" >
          </div>
          <div class=""form-group"">
            <ul class=""list-group"" id=""filelist"" > </ul>
          </div>
     
        <button class=""button"" type=""button"" onclick=""populate_latex()"" >Get Latext Sample</button>
        <button class=""button"" type=""button"" onclick=""post_latex()""> Post Body (Sample)</button>
        <button class=""button"" type=""button"" onclick=""reset_inputs()"">Reset Form</button>
        <button class=""button"" type=""button"" onclick=""post_latex_formData()""> Post FormData (Files and Sample)</button>
    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4046, 9752, true);
            WriteLiteral(@"
        <div class=""form-group"">
        <label for=""response"">Response from Latex to PDF server</label>
        <textarea id=""response"" class = ""form-control"" name=""response"" placeholder=""...response from latex to PDF server"" rows=""4"" cols=""50""></textarea>
      </div>
    
   
  </div>

<script type=""text/javascript"" >
    
     // var host = ""http://localhost:3000/api"";
    
    function get_tasks() {
        let owner =$(""#owner"" ).val();
        if (owner) {
        var url = host + '/ge_task/?owner=' + owner;
        httpGetAsync(url,display_list);
        }
    }
    
    function delete_task(id) {
        var url = host + '/ge_task/' + id;
        httpDeleteAsync(url,display_result);
        get_tasks();
    }
    function post_latex_formData() { 
        let form = document.getElementById(""latex_form"");
        let data = new FormData(form);
        let filename  = $(""#filename"" ).val();
        let latex  = $( ""#latex"" ).val();
        //remove newline formating and a");
            WriteLiteral(@"nd escape \ character
        let latex_esc = latex.replace(/\n/g,""\\n"").replace(/\\/g,""\\\\"");
        let owner  = $( ""#owner"" ).val();

        let type  = $( ""#type"" ).val();
        let dataclass  = $( ""#dataclass"" ).val();
        let expires  = $( ""#expires"" ).val();
        let description = $( ""#description"").val();
        
        data.append(""type"", type);
        data.append(""dataclass"", dataclass);
        data.append(""expires"", expires);
        data.append(""owner"", owner);
        data.append(""filename"", filename);
        data.append(""latex"",latex_esc);
        data.append(""description"", description);

        let url = host + '/ge_task';
        
        // httpPostAsync(url, data, display_result,'multi-part/form-data');
        // https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects
        // Warning: When using FormData to submit POST requests using XMLHttpRequest or the Fetch_API with the multipart/form-data Content-Type 
        // (e.g.");
            WriteLiteral(@" when uploading Files and Blobs to the server), do not explicitly set the Content-Type header on the request. 
        // Doing so will prevent the browser from being able to set the Content-Type header with the boundary expression it will use to delimit form fields in the request body.
        
        httpPostAsync(url, data, display_result,'');
        reset_inputs();
   
    } 
    function reset_inputs() {
        $( ""#filename"" ).val("""");
        $( ""#latex"" ).val("""");
        $( ""#files"" ).val("""");
        $( ""#filelist"" ).empty(); 
    }
   
    function post_latex() { 
          
        let filename  = $(""#filename"" ).val();
        let latex  = $( ""#latex"" ).val();
        //remove newline formating and add escaped \ character
        let latex_esc = latex.replace(/\n/g,""\\n"").replace(/\\/g,""\\\\"");
        let owner  = $( ""#owner"" ).val();
        
        let type  = $( ""#type"" ).val();
        let dataclass  = $( ""#dataclass"" ).val();
        let expires  = $( ""#expires"" ");
            WriteLiteral(@").val();
        let description = $( ""#description"").val();

        // let content = `{""filename"":""${filename}"",""latex"":""${latex_esc}"",""owner"":""${owner}"",""type"":"""",""dataclass"":""${dataclass}"",""expires"":""${expires}"""",""description"":""${description}""}`;
        let content = {""filename"": filename,
                        ""description"": description,
                        ""latex"": latex_esc,
                        ""owner"": owner,
                        ""type"": type,
                        ""expires"": expires,
                        ""dataclass"": dataclass
                        }
        let content2 = JSON.stringify(content);
        let url = host + '/ge_task';

        httpPostAsync(url, content2, display_result);
        reset_inputs();
      }

      function display_result(response) {
        let resp = document.getElementById(""response"");
        resp.innerHTML =  response;
        get_tasks();
      }
    
      function populate_latex() {
        
        lt = []
        ");
            WriteLiteral(@"
        var date = new Date();

        lt.push('\\documentclass{article}');
        lt.push('\\begin{document}');
        lt.push('Welcome to AECOM Ground Engineering Latex format reporting');
        lt.push('\\begin{center}')
        lt.push('Example 1: The following paragraph (given in quotes) is an'); 
        lt.push('example of centred alignment using the center environment.');
        lt.push('``La\\TeX{} is a document preparation system and document markup');
        lt.push('language. \\LaTeX{} uses the \\TeX{} typesetting program for formatting'); 
        lt.push('its output, and is itself written in the \\TeX{} macro language.'); 
        lt.push('\\LaTeX{} is not the name of a particular (executable) typesetting program, but'); 
        lt.push('refers to the suite of commands (\\TeX{} macros) which form the markup'); 
        lt.push('conventions used to typeset \\LaTeX{} documents.');
        lt.push('\\end{center}');
        lt.push(date.toISOString());
        lt.push('\\end");
            WriteLiteral(@"{document}');
        
        $( ""#filename"" ).val(""ge_file.tex"");
        $( ""#description"" ).val(""example aecom latex reporting"") 
        $( ""#latex"" ).val( lt.join(''));
        $( ""#type"").val(""normal"");
        $( ""#dataclass"").val(""none"");
        $( ""#expires"").val(date.setDate(date.getDate() + 7));
      
      }
    function add_download_links(id, files, td) {
       for (var j = 0; j < files.length; j++) { 
                      let download_file = files[j];
                      let download_url = host + ""/ge_task/"" + id + ""/download/"" + download_file;
                      let p = document.createElement('p')
                      // Create anchor element.
                      let a = document.createElement('a'); 
                           // Set the title.
                          a.title = download_file; 
                          // Set the href property.
                          a.href = download_url;
                          // Create target _blank attribute to open");
            WriteLiteral(@" in new window
                          a.setAttribute(""target"",""_blank"");
                          // Create the text node for anchor element.
                          let link = document.createTextNode(download_file);
                          // Append the text node to anchor element.
                          a.appendChild(link); 
                          p.append(a); 
                      td.appendChild(p);
        }
    }
    function display_list (response) {
        var json_data = JSON.parse(response);
        var tbd = document.getElementById(""task_body"");
        tbd.innerText='';
        tbd.innerHTML='';
        tbd.childNodes = null;
        $(""#task_body"").empty();
        if (json_data.data) {
          for (var i = 0; i < json_data.data.length; i++) {
          var task = json_data.data[i];
          tr = document.createElement('tr');
              
              td = document.createElement('td');
                td.setAttribute(""class"",""d-none"");
                ");
            WriteLiteral(@"td.innerHTML = task.Id;
              tr.appendChild(td);
              
              td = document.createElement('td');
                let p1 = document.createElement('p');
                    p1.innerHTML = task.createdDT
                      td.appendChild(p1);
                let p2 = document.createElement('p');
                    p2.innerHTML = task.type;
                      td.appendChild(p2);
                let p3 = document.createElement('p');    
                    p3.innerHTML = task.description;
                      td.appendChild(p3);
              tr.appendChild(td);
              
              if (task.files != null) {
                  let download_files = task.files.split("","");
                  let sel_files = [];
                  
                  // Add input tex files
                  sel_files = download_files.filter(name => name.includes('.tex'))
                  td = document.createElement('td');
                  td.setAttribute(""style"",""word-wrap: ");
            WriteLiteral(@"break-word;min-width: 160px;max-width: 160px;"");
                  add_download_links (task.Id, sel_files,td);
                  tr.appendChild(td);
                  
                  // Add intermediate files
                  sel_files = download_files.filter(name => !name.includes('.tex') &&
                                                               !name.includes('.pdf')) 
                  td = document.createElement('td');
                  td.setAttribute(""style"",""word-wrap: break-word;min-width: 160px;max-width: 160px;"");
                  add_download_links (task.Id, sel_files,td);
                  tr.appendChild(td);
                  
                  // Add output pdf files
                  sel_files = download_files.filter(name => name.includes('.pdf'))
                  td = document.createElement('td');
                  td.setAttribute(""style"",""word-wrap: break-word;min-width: 160px;max-width: 160px;"");
                  add_download_links (task.Id, sel_files,td);
   ");
            WriteLiteral(@"               tr.appendChild(td);
              }
                td = document.createElement('td');
                  del_btn = document.createElement ('button');
                  del_btn.setAttribute(""class"", ""button"");
                  del_btn.setAttribute(""onclick"", ""delete_task('"" + task.Id + ""')"");
                  del_btn.innerHTML = ""Delete"";
                td.appendChild(del_btn);
                  
              tr.appendChild(td);
          tbd.appendChild(tr);
          } 
        }
    }
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ge_app.Models.ProcessModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
